Technical Design Document(under construction)

This document describes the technical standards used in the development of the AO site.

File formats:
	All large image resources, such as backgrounds, car photos assume the JPG format.
		Logos for advertising are currently 385x85 .png, as they are small images where retention of resolution is important.
			IMPORTANT! Any logos which are registered trademarks much be licensed appropriately before hosting final page, to avoid legal action
	
    All audio files are MP3.

<h2>String Formatting<h2>
    Html/xml makes extensive use of quotes and double quotes for the
declaration of strings will be 
As html is often embedded inside other strings it quickly
become difficult to read
ALWAYS USE SINGLE QUOTES IN HTML, unless absolutely necessary(then the use of an html entity would be preffered)

<h3>javascript</h3>
    use single quoted string. json
    
<p class='good'>'{"id":"string"}' <--good</p>
    The exception is if it has html or url paths embedded.
"images/defaultBtn.png";   <--only needs single slash
"<button id='" + str + "'>text</button>";   <--can clearly distinguish the embedded quotes

<h3>PHP<h3>
    <a href='http://php.net/language.types.string'>PHP strings</a> differentiates single and double quoted strings with
certain distinctions. 
    Single quoted string require the escaping of special characters, /, ', etc
They are to be used in simple strings which do not contain embedded data(html/json)
and do not require the substitution of variables.

$str = 'simple string';
$str = 'this \' must be escaped'; <--is bad practice
$str = '{"id":"string"}' <--this is fine but not flexible

    Double quoted string may contain single quotes without escaping,
and support the direct substitution of variables.

<p class='good'>"this ' doesn't need to be escaped!";</p>
<p class='good'>
<$qm;php
$str = 'hello';
echo "<button id='$str'>This can't be real</button>";    <--this is preffered for embedding dynamic variables into a string
</p>
&qm;
<h3>JSON</h3>
    The <a href = 'http://json.org/'>json standard</a> requires the use of double quotes for expressing all string data
This makes for rather cumbersome

<p class='bad'>"{\"id\":\"string data\"}" <--ugly</p>
<p class='good'>'{"id":"string"}' <--better</p>
    
tip:
    In php and javascript, use json_encode() or JSON.stringify() to convert complex data objects

<h3>Repairs and upgrades</h3>
    Vehicle upgrades and repairs are represented by bitfields.
    This minimizes bandwidth from sql queries and sending data with php/ajax.
    
    Each field is represented by 4 bytes taking the form {XXXX,FFFF}
    Each group of 4 bits represents a single part of the car.
    
    Each bit represents one of 5 stages:
        0x0(no upgrade)
        0x1(stage 1)
        0x2(stage 2)
        0x4(stage 3)
        0x8(stage 4)
        
    Binary Visual:
        {0000,0000,0000,0000}    //new part
        {1000,1000,1000,1000}   //field fully upgraded
    Hex Visual:
        {0x0,0x0,0x0,0x0}    
        {0x8,0x8,0x8,0x8}
        
    The repair bit field contains 2 bytes(16-bits) representing
one repair for each part in each field
    {drivetrain,body,interior,documents}
    
    {1111,1111,1111,1111}(bin) OR {0xF,0xF,0xF,0xF}(hex)

    To access values in php or javascript a combination of bitshift and masking is required
    
    Bandwidth for single user's vehicle(24-bytes)
        id uint(4)
        dt uint(4)
        body uint(4)
        interior uint(4)
        docs uint(4)
        repairs uint(4)
    
    pending updates/overhaul could be reduced to (16-bytes)
        id uint(4)
        dt/body uint(4)
        interior/docs uint(4)
        repairs uint(4)
    